name: SuperClaude Unified Handler

# Ultra-strict concurrency control to prevent duplicates
concurrency:
  group: superclaude-unified-${{ github.event.issue.number || github.event.comment.id }}-${{ github.event_name }}-${{ github.event.action }}
  cancel-in-progress: true

on:
  issues:
    types: [labeled]
  issue_comment:
    types: [created]

jobs:
  superclaude-handler:
    # Ultra-strict conditions with runtime duplicate check
    if: |
      (github.event_name == 'issues' &&
       github.event.action == 'labeled' &&
       contains(github.event.issue.labels.*.name, 'claude-fix') &&
       github.actor != 'claude[bot]') ||
      (github.event_name == 'issue_comment' &&
       github.event.action == 'created' &&
       contains(github.event.comment.body, '@claude') &&
       github.actor != 'claude[bot]' &&
       !github.event.issue.pull_request)

    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write

    steps:
      - name: Runtime Duplicate Check
        id: duplicate-check
        run: |
          echo "Checking for duplicate runs..."
          
          # Get current workflow runs for this issue
          CURRENT_RUNS=$(gh run list \
            --workflow="superclaude-unified.yml" \
            --json status,conclusion,createdAt,id \
            --jq '[.[] | select(.status == "in_progress" or .status == "queued")] | length')
          
          echo "Active runs for this workflow: $CURRENT_RUNS"
          
          if [ "$CURRENT_RUNS" -gt 1 ]; then
            echo "Multiple runs detected. This run will exit to prevent duplicates."
            echo "duplicate=true" >> $GITHUB_OUTPUT
          else
            echo "No duplicates detected. Proceeding with execution."
            echo "duplicate=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Exit if Duplicate
        if: steps.duplicate-check.outputs.duplicate == 'true'
        run: |
          echo "ðŸš« Exiting due to duplicate run detection"
          exit 0

      - name: Checkout repository
        if: steps.duplicate-check.outputs.duplicate == 'false'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run SuperClaude Framework
        if: steps.duplicate-check.outputs.duplicate == 'false'
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          base_branch: main
          branch_prefix: superclaude/
          track_progress: true
          settings: |
            {
              "workingDirectory": ".",
              "environmentVariables": {
                "NODE_ENV": "development"
              }
            }
          prompt: |
            ðŸš¨ **MANDATORY: CREATE PULL REQUEST WITH CODE IMPLEMENTATION** ðŸš¨

            **CRITICAL SUCCESS CRITERIA**: This task is ONLY successful if a Pull Request is created.

            **ISSUE CONTEXT**: ${{ github.event.issue.title || 'Implementation Request' }}
            **ISSUE DESCRIPTION**: ${{ github.event.issue.body || github.event.comment.body }}

            **STEP-BY-STEP MANDATORY WORKFLOW**:

            **Phase 1: Create Branch**
            1. Run: `git status` (check current state)
            2. Run: `git checkout -b superclaude/issue-${{ github.event.issue.number }}`
            3. Verify branch created: `git branch`

            **Phase 2: Analyze & Implement**
            4. Read the issue description carefully
            5. Understand what needs to be implemented
            6. Create or modify the necessary files
            7. Follow the specific requirements in the issue description
            8. Ensure code quality and proper integration

            **Phase 3: Commit & Push** (MOST CRITICAL - DO NOT SKIP)
            9. Run: `git add .` (stage all changes)
            10. Run: `git status` (verify files staged)
            11. Run: `git commit -m "feat: implement issue #${{ github.event.issue.number }}"`
            12. Run: `git push origin superclaude/issue-${{ github.event.issue.number }}`

            **Phase 4: Create PR** (FINAL REQUIREMENT)
            13. Use GitHub API or gh CLI to create PR
            14. Link PR to issue #${{ github.event.issue.number }}
            15. Verify PR was created successfully

            **IMPLEMENTATION GUIDELINES**:
            - Follow existing code patterns and style
            - Ensure proper error handling
            - Add comments for complex logic
            - Test functionality if possible

            **FAILURE = NO PR CREATED. SUCCESS = WORKING PR WITH CODE.**

            Execute every step above. DO NOT STOP until Pull Request exists.

          claude_args: '--allowed-tools "*,Bash(git checkout:*),Bash(git branch:*),Bash(gh:*)" --max-turns 20'