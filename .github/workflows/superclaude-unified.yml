name: SuperClaude Unified Handler

on:
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

jobs:
  superclaude-handler:
    # Clear conditions to avoid conflicts
    if: |
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'claude-fix')) ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude'))

    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run SuperClaude Framework
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          base_branch: main
          branch_prefix: superclaude/
          track_progress: true
          prompt: |
            **SuperClaude Framework Active** - Full Implementation Mode

            /sc:load → Initialize project context

            **CRITICAL: This is IMPLEMENTATION mode - you MUST create branches and PRs**

            **Branch Strategy**:
            1. Create feature branch: `git checkout -b superclaude/issue-${{ github.event.issue.number || github.event.comment.id }}`
            2. Make all code changes and commits
            3. Push branch and create PR
            4. Link PR to issue #${{ github.event.issue.number }}

            **Task Management Workflow**:
            1. Use --task-manage to break issue into structured tasks
            2. Apply TodoWrite for progress tracking
            3. Use appropriate analysis modes:
               - --think for code analysis
               - --think-hard for complex architecture
               - --orchestrate for multi-tool coordination

            **Implementation Strategy**:
            1. Understand requirements (use --brainstorm if unclear)
            2. Analyze codebase with semantic tools (--serena)
            3. CREATE FEATURE BRANCH immediately
            4. Implement solution following SOLID principles
            5. Write/update tests (never skip validation)
            6. COMMIT all changes with proper messages
            7. PUSH branch to origin
            8. CREATE PR with structured description
            9. Link PR to original issue

            **SuperClaude Tools Available**:
            - --serena: Semantic code operations and project memory
            - --context7: Framework documentation lookup
            - --sequential: Complex reasoning and analysis
            - --magic: UI component generation if needed
            - --morphllm: Bulk code transformations

            **Quality Gates**:
            - Run lint/typecheck before committing
            - Ensure tests pass
            - Follow project conventions from CLAUDE.md

            **Success Criteria**: Issue resolved with working code in PR, not just analysis comments

            /sc:save → Preserve session context

          claude_args: '--allowed-tools "*" --max-turns 10'